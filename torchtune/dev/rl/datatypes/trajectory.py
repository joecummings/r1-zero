from typing import Dict, List

from dataclasses import dataclass
import torch
from typing import List, Dict, Optional, Any

from tensordict import TensorClass

@dataclass
class UnscoredTrajectory:
    """
    Represents a single trajectory generated by the policy model before scoring.

    Attributes:
        prompt_tokens (torch.Tensor): Unpadded prompt tokens. Shape: (prompt_len,).
        response_tokens (torch.Tensor): Unpadded response tokens generated by the policy.
            Shape: (response_len,).
        prompt_len (int): Length of the prompt tokens.
        response_len (int): Length of the response tokens.
        logprobs (torch.Tensor): Log probabilities of the response tokens from the
            generating policy (e.g., vLLM). Shape: (response_len,).
        answer (str): The ground truth or reference answer associated with the prompt.
        sequence_id (str): A unique identifier for this specific trajectory.
        policy_version (int): The version identifier of the policy model that generated
            this trajectory.
        group_id (str): An identifier grouping trajectories generated from the same base
            prompt, used for advantage computation.
    """
    prompt_tokens: torch.Tensor
    response_tokens: torch.Tensor
    prompt_len: int
    response_len: int
    logprobs: torch.Tensor
    answer: str
    sequence_id: str
    policy_version: int
    group_id: str

@dataclass
class GroupedUnscoredTrajectories:
    """
    Represents a collection of unscored trajectories generated from the same base prompt.

    Attributes:
        trajectories (List[UnscoredTrajectory]): A list of individual unscored trajectories
            belonging to this group.
        group_id (str): The unique identifier shared by all trajectories in this group.
        total_tokens (int): The sum of prompt lengths and response lengths for all
            trajectories in the group.
    """
    trajectories: List[UnscoredTrajectory]
    group_id: str
    total_tokens: int

class ScoredTrajectory(TensorClass["nocast"]):
    """
    Represents a single trajectory after it has been scored by reward functions
    and a reference model.

    Attributes:
        prompt_tokens (torch.Tensor): Unpadded prompt tokens. Shape: (prompt_len,).
        response_tokens (torch.Tensor): Unpadded response tokens generated by the policy.
            Shape: (response_len,).
        prompt_len (int): Length of the prompt tokens.
        response_len (int): Length of the response tokens.
        logprobs (torch.Tensor): Log probabilities of the response tokens from the
            generating policy (e.g., vLLM). Shape: (response_len,).
        ref_logprobs (torch.Tensor): Log probabilities of the response tokens from the
            reference model. Shape: (response_len,).
        rewards (torch.Tensor): Reward values assigned by different reward functions.
            Shape: (num_funcs,).
        advantages (torch.Tensor): The calculated advantage estimate for this trajectory
            (scalar).
        successes (torch.Tensor): Success indicators from different reward functions.
            Shape: (num_funcs,).
        answer (str): The ground truth or reference answer associated with the prompt.
        sequence_id (str): A unique identifier for this specific trajectory.
        group_id (str): An identifier grouping trajectories generated from the same base
            prompt.
        reward_metadata (Dict[str, Any]): Additional metadata returned by the reward
            computation process (e.g., names of reward functions).
        policy_version (int): The version identifier of the policy model that generated
            this trajectory.
    """
    prompt_tokens: torch.Tensor
    response_tokens: torch.Tensor
    prompt_len: int
    response_len: int
    logprobs: torch.Tensor
    ref_logprobs: torch.Tensor
    rewards: torch.Tensor
    advantages: torch.Tensor
    successes: torch.Tensor
    answer: str
    sequence_id: str
    group_id: str
    reward_metadata: Dict[str, Any]
    policy_version: int

@dataclass
class PackedTrajectory:
    """
    Represents a batch of trajectories packed into single tensors for efficient model processing.

    Attributes:
        tokens (torch.Tensor): Concatenated prompt and response tokens for all sequences in the batch,
            potentially padded. Shape: (packed_seq_len,). Example: [P1, R1, P2, R2, ...].
        attention_mask (torch.Tensor): Block-diagonal causal attention mask for the packed sequences.
            Shape: (packed_seq_len, packed_seq_len).
        position_ids (torch.Tensor): Position IDs for the packed sequences. Shape: (packed_seq_len,).
        response_mask (torch.Tensor): Boolean mask indicating positions of response tokens in `tokens`.
            Shape: (packed_seq_len,).
        sequence_mask (torch.Tensor): Integer mask indicating which sequence each token belongs to.
            Shape: (packed_seq_len,).
        group_mask (torch.Tensor): Integer mask indicating which group each sequence belongs to.
            Shape: (packed_seq_len,).
        response_lens (torch.Tensor): Lengths of responses for each sequence. Shape: (num_sequences,).
        prompt_lens (torch.Tensor): Lengths of prompts for each sequence. Shape: (num_sequences,).
        pad_count (int): Number of padding tokens in `tokens`.
        sequence_map (torch.Tensor): Start and end indices for each sequence in `tokens`.
            Shape: (num_sequences, 2).
        packed_seq_len (int): Total length of `tokens`, including padding.
        ref_logprobs (Optional[torch.Tensor]): Concatenated reference model log probabilities for
            response tokens. Shape: (total_response_tokens,).
        advantages (Optional[torch.Tensor]): Concatenated advantage values for response tokens.
            Shape: (total_response_tokens,).
        targets (Optional[torch.Tensor]): Target tokens for loss computation, typically `tokens` shifted
            by 1, with last token of each sequence and padding set to ignore_index.
            Shape: (packed_seq_len,).
        sequence_ids (Optional[List[str]]): Unique identifiers for each sequence.
        group_ids (Optional[List[str]]): Group identifiers for each sequence.
    """
    tokens: torch.Tensor
    attention_mask: torch.Tensor
    position_ids: torch.Tensor
    response_mask: torch.Tensor
    sequence_mask: torch.Tensor
    group_mask: torch.Tensor
    
    # -- helper fields --
    response_lens: torch.Tensor
    prompt_lens: torch.Tensor
    pad_count: int
    sequence_map: torch.Tensor
    packed_seq_len: int

    # -- Scored --
    ref_logprobs: Optional[torch.Tensor] = None
    advantages: Optional[torch.Tensor] = None
    targets: Optional[torch.Tensor] = None
    sequence_ids: Optional[List[str]] = None
    group_ids: Optional[List[str]] = None